package com.morphgame.morphgame;

import java.util.ArrayList;

import java.util.List;
import java.util.Scanner;

import android.graphics.Color;
import android.graphics.Paint;

import com.morphgame.framework.Game;
import com.morphgame.framework.Graphics;
import com.morphgame.framework.Image;
import com.morphgame.framework.Screen;
import com.morphgame.framework.Input.TouchEvent;

public class GameScreen extends Screen {
	enum GameState {
		Ready, Running, Paused, GameOver, LeaderBoard
	}

	GameState state = GameState.Ready;

	// Variable Setup

	private static Background bg1, bg2;
	private static MainCharacter mainCharacter;
	
	private static LeaderBoard leaderBoard;

	private Image currentSprite, character, characterForward, characterBack, characterDown, characterJump;

	private ArrayList tilearray = new ArrayList();

	int livesLeft = 1;
	Paint paint, paint2, paint3, paint4;

	public GameScreen(Game game) {
		super(game);

		// Initialize game objects here

		bg1 = new Background(0, 0);
		bg2 = new Background(2160, 0);
		mainCharacter = new MainCharacter();

		
		squareImages();
		currentSprite = character;

		loadMap();

		// Defining a paint object
		paint = new Paint();
		paint.setTextSize(30);
		paint.setTextAlign(Paint.Align.CENTER);
		paint.setAntiAlias(true);
		paint.setColor(Color.WHITE);

		paint2 = new Paint();
		paint2.setTextSize(100);
		paint2.setTextAlign(Paint.Align.CENTER);
		paint2.setAntiAlias(true);
		paint2.setColor(Color.WHITE);
		
		paint3 = new Paint();
		paint3.setTextSize(40);
		paint3.setTextAlign(Paint.Align.CENTER);
		paint3.setAntiAlias(true);
		paint3.setColor(Color.BLACK);

		paint4 = new Paint();
		paint4.setTextSize(60);
		paint4.setTextAlign(Paint.Align.CENTER);
		paint4.setAntiAlias(true);
		paint4.setColor(Color.WHITE);

	}
	
	private void squareImages(){
		mainCharacter.setMorph("square");
		character = Assets.square;
		characterForward = Assets.squareForward;
		characterBack = Assets.squareBack;
		characterDown = Assets.down;
		characterJump = Assets.squareJump;
	}
	
	private void circleImages(){
		mainCharacter.setMorph("circle");
		character = Assets.circle;
		characterForward = Assets.circleForward;
		characterBack = Assets.circleBack;
		characterDown = Assets.down;
		characterJump = Assets.circleJump;
		
	}
	
	private void balloonImages(){
		mainCharacter.setMorph("balloon");
		character = Assets.balloon;
		characterForward = Assets.balloonForward;
		characterBack = Assets.balloonBack;
		characterJump = character;
		characterDown = character;
	}

	private void loadMap() {
		ArrayList lines = new ArrayList();
		int width = 0;
		int height = 0;

		Scanner scanner = new Scanner(MorphGame.map);
		while (scanner.hasNextLine()) {
			String line = scanner.nextLine();

			// no more lines to read
			if (line == null) {
				break;
			}

			if (!line.startsWith("!")) {
				lines.add(line);
				width = Math.max(width, line.length());

			}
		}
		height = lines.size();

		for (int j = 0; j < 12; j++) {
			String line = (String) lines.get(j);
			for (int i = 0; i < width; i++) {

				if (i < line.length()) {
					char ch = line.charAt(i);
					Tile t = new Tile(i, j, Character.getNumericValue(ch));
					tilearray.add(t);
				}

			}
		}

	}

	@Override
	public void update(float deltaTime) {
		List touchEvents = game.getInput().getTouchEvents();

		// We have four separate update methods in this example.
		// Depending on the state of the game, we call different update methods.
		// Refer to Unit 3's code. We did a similar thing without separating the
		// update methods.

		if (state == GameState.Ready)
			updateReady(touchEvents);
		if (state == GameState.Running)
			updateRunning(touchEvents, deltaTime);
		if (state == GameState.Paused)
			updatePaused(touchEvents);
		if (state == GameState.GameOver)
			updateGameOver(touchEvents);
		if( state == GameState.LeaderBoard)
			updateLeaderBoard();
	}

	

	private void updateReady(List touchEvents) {

		// This example starts with a "Ready" screen.
		// When the user touches the screen, the game begins.
		// state now becomes GameState.Running.
		// Now the updateRunning() method will be called!

		if (touchEvents.size() > 0)
			state = GameState.Running;
	}

	private void updateRunning(List touchEvents, float deltaTime) {

		// This is identical to the update() method from our Unit 2/3 game.

		// 1. All touch input is handled here:
		int len = touchEvents.size();
		for (int i = 0; i < len; i++) {
			TouchEvent event = (TouchEvent) touchEvents.get(i);
			if (event.type == TouchEvent.TOUCH_DOWN) {

				if (inBounds(event, 0, 285, 65, 65)) {
					mainCharacter.jump();
					currentSprite = characterJump;
					mainCharacter.setDucked(false);
				}else if (inBounds(event, 0,350,65,65)){
					changeMorph();
					
				}else if (inBounds(event, 0, 415, 65, 65)
						&& mainCharacter.isJumped() == false) {
					currentSprite = characterDown;
					mainCharacter.setDucked(true);
					mainCharacter.setSpeedX(0);

				}

				if (event.x > 400) {
					// Move right.
					mainCharacter.moveRight();
					mainCharacter.setMovingRight(true);
					
				}

			}

			if (event.type == TouchEvent.TOUCH_UP) {

				if (inBounds(event, 0, 415, 65, 65)) {
					currentSprite = character;
					mainCharacter.setDucked(false);

				}

				if (inBounds(event, 0, 0, 35, 35)) {
					pause();

				}

				if (event.x > 400) {
					// Move right.
					mainCharacter.stopRight();
				}
			}

		}

		// 2. Check miscellaneous events like death:

		if (livesLeft == 0) {
			state = GameState.GameOver;
		}
		if(mainCharacter.getTouchingSpikes()){
			state = GameState.GameOver;
		}

		// 3. Call individual update() methods here.
		// This is where all the game updates happen.
		// For example, .mainCharacter.update();
		mainCharacter.update();
	
		if(mainCharacter.isDucked()){
			currentSprite = characterDown;
		}else if(mainCharacter.isMovingRight()){
			currentSprite = characterForward;
		}else if(mainCharacter.isMovingLeft()){
			currentSprite = characterBack;
		}else if (mainCharacter.isJumped()) {
			currentSprite = characterJump;
		}else{
			currentSprite = character;
		}

		updateTiles();
		bg1.update();
		bg2.update();

		if (mainCharacter.getCenterY() > 500) {
			state = GameState.GameOver;
		}
	}
	
	public void changeMorph(){
		if(mainCharacter.getMorph().equals("square")){
			circleImages();
		}else if(mainCharacter.getMorph().equals("circle")){
			balloonImages();
		}else if(mainCharacter.getMorph().equals("balloon")){
			squareImages();
		}
	}
	
	
	private boolean inBounds(TouchEvent event, int x, int y, int width,
			int height) {
		if (event.x > x && event.x < x + width - 1 && event.y > y
				&& event.y < y + height - 1)
			return true;
		else
			return false;
	}

	private void updatePaused(List touchEvents) {
		int len = touchEvents.size();
		for (int i = 0; i < len; i++) {
			TouchEvent event = (TouchEvent) touchEvents.get(i);
			if (event.type == TouchEvent.TOUCH_UP) {
				if (inBounds(event, 0, 0, 800, 240)) {

					if (!inBounds(event, 0, 0, 35, 35)) {
						resume();
					}
				}

				if (inBounds(event, 0, 240, 800, 240)) {
					nullify();
					goToMenu();
				}
			}
		}
	}

	private void updateGameOver(List touchEvents) {
		/*g.drawString("GAME OVER.", 400, 200, paint2);
		g.drawString("Submit Score: " + mainCharacter.getScore(),400,280,paint4);
		g.drawString("Return", 400, 360, paint4);
		*/
		
		int len = touchEvents.size();
		for (int i = 0; i < len; i++) {
			TouchEvent event = (TouchEvent) touchEvents.get(i);
			if (event.type == TouchEvent.TOUCH_UP) {
				if (inBounds(event, 0, 0, 800, 240)) {

				//return
				//inBounds(TouchEvent event, int x, int y, int width, int height)
				if (inBounds(event, 400, 360, 100, 60)) {
					nullify();
					game.setScreen(new MainMenuScreen(game));
					return;
				}
				
				if (inBounds(event, 400, 280, 400, 60)) {
					nullify();
					game.setScreen(new MainMenuScreen(game));
					return;
				}
			}
		}

	}
	
	private void updateLeaderBoard() {
		// TODO Auto-generated method stub
		
	}

	private void updateTiles() {

		for (int i = 0; i < tilearray.size(); i++) {
			Tile t = (Tile) tilearray.get(i);
			t.update();
		}

	}

	@Override
	public void paint(float deltaTime) {
		Graphics g = game.getGraphics();

		g.drawImage(Assets.background, bg1.getBgX(), bg1.getBgY());
		g.drawImage(Assets.background, bg2.getBgX(), bg2.getBgY());
		paintTiles(g);
		
		// First draw the game elements.

		g.drawImage(currentSprite, mainCharacter.getCenterX() - 61,
				mainCharacter.getCenterY() - 63);

		// Next, draw the UI above the game elements.
		if (state == GameState.Ready)
			drawReadyUI();
		if (state == GameState.Running)
			drawRunningUI();
		if (state == GameState.Paused)
			drawPausedUI();
		if (state == GameState.GameOver)
			drawGameOverUI();
		if(state == GameState.LeaderBoard)
			drawLeaderBoard();
	}

	private void paintTiles(Graphics g) {
		for (int i = 0; i < tilearray.size(); i++) {
			Tile t = (Tile) tilearray.get(i);
			if (t.getTileType() != 0) {
				g.drawImage(t.getTileImage(), t.getTileX(), t.getTileY());
			}
		}
	}

	private void nullify() {

		// Set all variables to null. It will be recreating them in the
		// constructor.
		paint = null;
		bg1 = null;
		bg2 = null;
		mainCharacter = null;
		currentSprite = null;
		character = null;
		characterDown = null;
		characterJump = null;
		characterForward = null;
		characterBack = null;

		// Call garbage collector to clean up memory.
		System.gc();

	}

	private void drawReadyUI() {
		//Ready screen
		Graphics g = game.getGraphics();

		g.drawARGB(155, 0, 0, 0);
		g.drawString("Tap to Start.", 400, 240, paint);

	}

	private void drawRunningUI() {
		Graphics g = game.getGraphics();
		
		g.drawString(Integer.toString(mainCharacter.getScore()), 750,50, paint3);
		
		g.drawImage(Assets.button, 0, 285, 0, 0, 65, 65);//jump
		g.drawImage(Assets.buttonMorph, 0, 350,0,0,65,65);//morph
		g.drawImage(Assets.button, 0, 415, 0, 130, 65, 65);//down
		g.drawImage(Assets.button, 0, 0, 0, 195, 35, 35);//pause button

	}

	private void drawPausedUI() {
		Graphics g = game.getGraphics();
		// Darken the entire screen to display the Paused screen.
		g.drawARGB(155, 0, 0, 0);
		g.drawString("Resume", 400, 165, paint2);
		g.drawString("Menu", 400, 360, paint2);

	}

	private void drawGameOverUI() {
		Graphics g = game.getGraphics();
		g.drawRect(0, 0, 1281, 801, Color.BLACK);
		g.drawString("GAME OVER.", 400, 200, paint2);
		g.drawString("Submit Score: " + mainCharacter.getScore(),400,280,paint4);
		g.drawString("Return", 400, 360, paint4);
		
		

	}
	private void drawLeaderBoard(){
		//displays top ten in leaderboard
		Graphics g = game.getGraphics();
		g.drawRect(0, 0, 1281, 801, Color.BLACK);
		g.drawString(leaderBoard.getScores(10),275,0,paint);
	}

	@Override
	public void pause() {
		if (state == GameState.Running)
			state = GameState.Paused;

	}

	@Override
	public void resume() {
		if (state == GameState.Paused)
			state = GameState.Running;
	}

	@Override
	public void dispose() {

	}

	@Override
	public void backButton() {
		pause();
	}

	private void goToMenu() {
		// TODO Auto-generated method stub
		game.setScreen(new MainMenuScreen(game));

	}

	public static Background getBg1() {
		// TODO Auto-generated method stub
		return bg1;
	}

	public static Background getBg2() {
		// TODO Auto-generated method stub
		return bg2;
	}

	public static MainCharacter getMainCharacter() {
		// TODO Auto-generated method stub
		return mainCharacter;
	}

}